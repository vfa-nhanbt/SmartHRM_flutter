// Autogenerated from Pigeon (v4.2.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif


/// Generated class from Pigeon.

///Generated class from Pigeon that represents data sent in messages.
struct FaceImage {
  var encodedImage: [[UInt8]?]? = nil
  var imageWidth: Int32? = nil
  var imageHeight: Int32? = nil
  var left: Int32? = nil
  var top: Int32? = nil
  var faceWidth: Int32? = nil
  var faceHeight: Int32? = nil
  var rotX: Double? = nil
  var rotY: Double? = nil

  static func fromMap(_ map: [String: Any?]) -> FaceImage? {
    let encodedImage = map["encodedImage"] as? [[UInt8]?] 
    let imageWidth = map["imageWidth"] as? Int32 
    let imageHeight = map["imageHeight"] as? Int32 
    let left = map["left"] as? Int32 
    let top = map["top"] as? Int32 
    let faceWidth = map["faceWidth"] as? Int32 
    let faceHeight = map["faceHeight"] as? Int32 
    let rotX = map["rotX"] as? Double 
    let rotY = map["rotY"] as? Double 

    return FaceImage(
      encodedImage: encodedImage,
      imageWidth: imageWidth,
      imageHeight: imageHeight,
      left: left,
      top: top,
      faceWidth: faceWidth,
      faceHeight: faceHeight,
      rotX: rotX,
      rotY: rotY
    )
  }
  func toMap() -> [String: Any?] {
    return [
      "encodedImage": encodedImage,
      "imageWidth": imageWidth,
      "imageHeight": imageHeight,
      "left": left,
      "top": top,
      "faceWidth": faceWidth,
      "faceHeight": faceHeight,
      "rotX": rotX,
      "rotY": rotY
    ]
  }
}
private class FaceImageApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return FaceImage.fromMap(self.readValue() as! [String: Any])      
      default:
        return super.readValue(ofType: type)
      
    }
  }
}
private class FaceImageApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? FaceImage {
      super.writeByte(128)
      super.writeValue(value.toMap())
    } else {
      super.writeValue(value)
    }
  }
}

private class FaceImageApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return FaceImageApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return FaceImageApiCodecWriter(data: data)
  }
}

class FaceImageApiCodec: FlutterStandardMessageCodec {
  static let shared = FaceImageApiCodec(readerWriter: FaceImageApiCodecReaderWriter())
}

///Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol FaceImageApi {
  func processImage(faceImage: FaceImage) -> [String: Any?]
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class FaceImageApiSetup {
  /// The codec used by FaceImageApi.
  static var codec: FlutterStandardMessageCodec { FaceImageApiCodec.shared }
  /// Sets up an instance of `FaceImageApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: FaceImageApi?) {
    let processImageChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.FaceImageApi.processImage", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      processImageChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let faceImageArg = args[0] as! FaceImage
        let result = api.processImage(faceImage: faceImageArg)
        reply(wrapResult(result))
      }
    } else {
      processImageChannel.setMessageHandler(nil)
    }
  }
}

private func wrapResult(_ result: Any?) -> [String: Any?] {
  return ["result": result]
}

private func wrapError(_ error: FlutterError) -> [String: Any?] {
  return [
    "error": [
      "code": error.code,
      "message": error.message,
      "details": error.details
    ]
  ]
}
