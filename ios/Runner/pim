// Autogenerated from Pigeon (v4.2.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "pigeon.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString *, id> *wrapResult(id result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ?: [NSNull null]),
        @"message": (error.message ?: [NSNull null]),
        @"details": (error.details ?: [NSNull null]),
        };
  }
  return @{
      @"result": (result ?: [NSNull null]),
      @"error": errorDict,
      };
}
static id GetNullableObject(NSDictionary* dict, id key) {
  id result = dict[key];
  return (result == [NSNull null]) ? nil : result;
}
static id GetNullableObjectAtIndex(NSArray* array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}


@interface FaceImage ()
+ (FaceImage *)fromMap:(NSDictionary *)dict;
+ (nullable FaceImage *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end

@implementation FaceImage
+ (instancetype)makeWithEncodedImage:(nullable NSArray<FlutterStandardTypedData *> *)encodedImage
    imageWidth:(nullable NSNumber *)imageWidth
    imageHeight:(nullable NSNumber *)imageHeight
    left:(nullable NSNumber *)left
    top:(nullable NSNumber *)top
    faceWidth:(nullable NSNumber *)faceWidth
    faceHeight:(nullable NSNumber *)faceHeight
    rotX:(nullable NSNumber *)rotX
    rotY:(nullable NSNumber *)rotY {
  FaceImage* pigeonResult = [[FaceImage alloc] init];
  pigeonResult.encodedImage = encodedImage;
  pigeonResult.imageWidth = imageWidth;
  pigeonResult.imageHeight = imageHeight;
  pigeonResult.left = left;
  pigeonResult.top = top;
  pigeonResult.faceWidth = faceWidth;
  pigeonResult.faceHeight = faceHeight;
  pigeonResult.rotX = rotX;
  pigeonResult.rotY = rotY;
  return pigeonResult;
}
+ (FaceImage *)fromMap:(NSDictionary *)dict {
  FaceImage *pigeonResult = [[FaceImage alloc] init];
  pigeonResult.encodedImage = GetNullableObject(dict, @"encodedImage");
  pigeonResult.imageWidth = GetNullableObject(dict, @"imageWidth");
  pigeonResult.imageHeight = GetNullableObject(dict, @"imageHeight");
  pigeonResult.left = GetNullableObject(dict, @"left");
  pigeonResult.top = GetNullableObject(dict, @"top");
  pigeonResult.faceWidth = GetNullableObject(dict, @"faceWidth");
  pigeonResult.faceHeight = GetNullableObject(dict, @"faceHeight");
  pigeonResult.rotX = GetNullableObject(dict, @"rotX");
  pigeonResult.rotY = GetNullableObject(dict, @"rotY");
  return pigeonResult;
}
+ (nullable FaceImage *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [FaceImage fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"encodedImage" : (self.encodedImage ?: [NSNull null]),
    @"imageWidth" : (self.imageWidth ?: [NSNull null]),
    @"imageHeight" : (self.imageHeight ?: [NSNull null]),
    @"left" : (self.left ?: [NSNull null]),
    @"top" : (self.top ?: [NSNull null]),
    @"faceWidth" : (self.faceWidth ?: [NSNull null]),
    @"faceHeight" : (self.faceHeight ?: [NSNull null]),
    @"rotX" : (self.rotX ?: [NSNull null]),
    @"rotY" : (self.rotY ?: [NSNull null]),
  };
}
@end

@interface FaceImageApiCodecReader : FlutterStandardReader
@end
@implementation FaceImageApiCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [FaceImage fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface FaceImageApiCodecWriter : FlutterStandardWriter
@end
@implementation FaceImageApiCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[FaceImage class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface FaceImageApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation FaceImageApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[FaceImageApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[FaceImageApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *FaceImageApiGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    FaceImageApiCodecReaderWriter *readerWriter = [[FaceImageApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


void FaceImageApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FaceImageApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.FaceImageApi.processImage"
        binaryMessenger:binaryMessenger
        codec:FaceImageApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(processImageFaceImage:error:)], @"FaceImageApi api (%@) doesn't respond to @selector(processImageFaceImage:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FaceImage *arg_faceImage = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        NSString *output = [api processImageFaceImage:arg_faceImage error:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
